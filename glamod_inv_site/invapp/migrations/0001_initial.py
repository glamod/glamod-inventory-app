# Generated by Django 2.0.7 on 2018-07-31 10:34

from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Contact',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256, null=True, verbose_name='Contact Name')),
                ('organisation', models.CharField(max_length=256, null=True, verbose_name='Contact Organisation')),
                ('emailAddress', models.EmailField(max_length=254, null=True, verbose_name='Email address')),
                ('telephone', models.CharField(max_length=20, null=True, verbose_name='Telephone (incl. country and area code)')),
                ('address', models.CharField(blank=True, max_length=256, null=True)),
                ('city', models.CharField(blank=True, max_length=256, null=True)),
                ('adminArea', models.CharField(blank=True, max_length=256, null=True)),
                ('postalCode', models.CharField(blank=True, max_length=256, null=True)),
                ('country', models.CharField(blank=True, max_length=256, null=True)),
                ('position', models.CharField(blank=True, max_length=256, null=True)),
                ('privacy', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name': 'Contact',
            },
        ),
        migrations.CreateModel(
            name='GeometryType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entry', models.CharField(max_length=256, verbose_name='type')),
                ('description', models.CharField(max_length=256)),
            ],
            options={
                'verbose_name': 'Geometry type',
            },
        ),
        migrations.CreateModel(
            name='Inventory',
            fields=[
                ('source_id', models.CharField(default=uuid.uuid4, max_length=256, primary_key=True, serialize=False, verbose_name='Unique ID for source')),
                ('product_name', models.CharField(max_length=256, verbose_name='Dataset name')),
                ('product_id', models.CharField(blank=True, max_length=256, null=True, verbose_name='Product ID (set by provider)')),
                ('record_status', models.CharField(blank=True, max_length=256, null=True, verbose_name='Status of metadata record')),
                ('product_code', models.CharField(blank=True, max_length=256, null=True)),
                ('product_version', models.CharField(blank=True, max_length=256, null=True)),
                ('product_level', models.CharField(blank=True, max_length=256, null=True)),
                ('product_status', models.CharField(blank=True, max_length=256, null=True, verbose_name='Status of product')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Descripton / abstract')),
                ('product_references', models.TextField(blank=True, null=True, verbose_name='Papers / references describing the data')),
                ('product_citation', models.TextField(blank=True, null=True, verbose_name='Product citation (how to cite this data)')),
                ('data_policy', models.CharField(blank=True, max_length=256, null=True)),
                ('data_policy_document', models.URLField(blank=True, max_length=256, null=True, verbose_name='URL to Data Policy document')),
                ('variables_attained', models.CharField(blank=True, max_length=256, null=True, verbose_name='Variables present and available')),
                ('variables_not_attained', models.CharField(blank=True, max_length=256, null=True, verbose_name='Variables present in source data but not processed / available')),
                ('spatial_domain', models.CharField(default='Global', max_length=256, null=True, verbose_name='Spatial domain')),
                ('crs', models.CharField(default='urn:ogc:def:crs:EPSG::4326', max_length=256, null=True, verbose_name='Coordinate reference system')),
                ('bbox_min_latitude', models.FloatField(default=-90.0, verbose_name='Southern-most latitude')),
                ('bbox_max_latitude', models.FloatField(default=90.0, verbose_name='Northern-most latitude')),
                ('bbox_min_longitude', models.FloatField(default=-180.0, verbose_name='Western-most longitude')),
                ('bbox_max_longitude', models.FloatField(default=180.0, verbose_name='Eastern-most longitude')),
                ('start_date', models.DateTimeField(default='1900-01-01', verbose_name='Start date')),
                ('end_date', models.DateTimeField(default='2014-12-31', verbose_name='End date')),
                ('station_count', models.IntegerField(blank=True, null=True, verbose_name='Estimated number of stations in dataset')),
                ('mean_years_present', models.IntegerField(blank=True, null=True, verbose_name='Mean number of years available (per station)')),
                ('reporting_frequency', models.CharField(blank=True, max_length=10, null=True, verbose_name='Frequency of observations, e.g. sub-daily, daily, monthly etc')),
                ('data_centre', models.CharField(blank=True, max_length=256, null=True)),
                ('data_centre_url', models.URLField(blank=True, max_length=256, null=True)),
                ('source_format', models.CharField(blank=True, max_length=256, null=True)),
                ('source_format_version', models.CharField(blank=True, max_length=256, null=True)),
                ('source_file', models.CharField(blank=True, max_length=256, null=True)),
                ('source_file_checksum', models.CharField(blank=True, max_length=256, null=True)),
                ('product_uri', models.CharField(blank=True, max_length=256, null=True)),
                ('comments', models.TextField(blank=True, null=True, verbose_name='Extra notes')),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Time / date this metadata entry was last edited')),
                ('optional_data', models.BooleanField(default=False)),
                ('contact_data', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='invapp.Contact', verbose_name='Contact (for data)')),
                ('contact_metadata', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='contact_data', to='invapp.Contact', verbose_name='Contact (for metadata)')),
            ],
            options={
                'verbose_name': 'Inventory',
            },
        ),
        migrations.CreateModel(
            name='InventoryHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Time / date this metadata entry was last edited')),
                ('action', models.CharField(max_length=32)),
                ('description', models.TextField(default='Initial commit', verbose_name='history')),
            ],
            options={
                'verbose_name': 'History',
            },
        ),
        migrations.CreateModel(
            name='LinkInvHist',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('history', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='invapp.InventoryHistory')),
                ('inventory', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='invapp.Inventory')),
            ],
            options={
                'verbose_name': 'Link table for inventory and history',
            },
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entry', models.CharField(max_length=32, verbose_name='Entry')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
            ],
            options={
                'verbose_name': 'Role code',
            },
        ),
        migrations.CreateModel(
            name='ScopeCode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entry', models.CharField(max_length=256, verbose_name='frequency')),
                ('description', models.CharField(max_length=256)),
            ],
            options={
                'verbose_name': 'MD_ScopeCode',
            },
        ),
        migrations.CreateModel(
            name='UpdateFrequency',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entry', models.CharField(max_length=256, verbose_name='frequency')),
                ('description', models.CharField(max_length=256)),
            ],
            options={
                'verbose_name': 'Update frequency',
            },
        ),
        migrations.AddField(
            model_name='inventory',
            name='contact_role_data',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='invapp.Role', verbose_name='Role (for data)'),
        ),
        migrations.AddField(
            model_name='inventory',
            name='contact_role_metadata',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='contact_role_data', to='invapp.Role', verbose_name='Role (for metadata contact)'),
        ),
        migrations.AddField(
            model_name='inventory',
            name='geometry_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='invapp.GeometryType', verbose_name='geometry type'),
        ),
        migrations.AddField(
            model_name='inventory',
            name='scope',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='invapp.ScopeCode'),
        ),
        migrations.AddField(
            model_name='inventory',
            name='update_frequency',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='invapp.UpdateFrequency'),
        ),
    ]
